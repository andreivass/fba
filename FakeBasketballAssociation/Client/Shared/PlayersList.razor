@inject FakeBasketballAssociation.Client.Repository.IVoteRepository votesRepo
@inject FakeBasketballAssociation.Client.Repository.IPlayerRepository playersRepo
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager

@if (PlayersAll == null)
{
    <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" />
}
else if (PlayersAll.Count == 0)
{
    <p>Sorry no data at the monent. Come back later.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3">

        @foreach (var item in PlayersAll)
        {
            <div class="col mb-4">
                <PlayerIndividual VotePlayer="VotePlayer"
                                  PlayerOne="@item"
                                  VoteLocked="@VoteLocked"
                                  DeletePlayer="@DeletePlayer">
                </PlayerIndividual>
            </div>
        }
    </div>
}

@code {
    [Parameter] public List<PlayerDTO> PlayersAll { get; set; }
    [Parameter] public EventCallback ChangeVoteLock { get; set; }
    private string CurrentUser;
    public bool VoteLocked { get; set; } = false;

    private async Task VotePlayer(PlayerDTO Player)
    {
        var newVote = new VoteCreateDTO()
        {
            PlayerId = Player.PlayerId,
            UserName = CurrentUser
        };
        await votesRepo.PostVote(newVote);
        await displayMessage.DisplaySuccessMessage("Vote posted!");
        Player.VotesTemp++;
        VoteLocked = true;
        await ChangeVoteLock.InvokeAsync(true);
    }

    private async Task DeletePlayer(PlayerDTO Player)
    {
        if (Player.VotesTemp > 0)
        {
            await displayMessage.DisplayErrorMessage($"Sorry, cannot delete {Player.FirstName} if he has {Player.VotesTemp} votes already.");
        }
        else
        {
            await playersRepo.DeletePlayer(Player);
            await displayMessage.DisplaySuccessMessage($"Too bad you didn´t like {Player.FirstName}, he´s gone from the list.");
            RemovePlayerFromList(Player);
        }

    }

    private void RemovePlayerFromList(PlayerDTO Player)
    {
        PlayersAll.Remove(Player);
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = userState.User.Identity.Name;
        if (CurrentUser != null)
        {
            Console.WriteLine($"currentuser: {CurrentUser}");

            var votesCount = await votesRepo.GetUserVotes(CurrentUser);

            if (votesCount > 0)
            {
                VoteLocked = true;
                await ChangeVoteLock.InvokeAsync(true);
            }

            Console.WriteLine($"votesCount: {votesCount}");
        }

    }
}
