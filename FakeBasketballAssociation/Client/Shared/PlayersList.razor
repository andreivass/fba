@inject FakeBasketballAssociation.Client.Repository.IVoteRepository votesRepo
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (PlayersAll == null)
{
    <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" />
}
else if (PlayersAll.Count == 0)
{
    <p>Sorry no data at the monent. Come back later.</p>
}
else
{
    
    <div class="row row-cols-1 row-cols-md-3">

        @foreach (var item in PlayersAll)
        {
            <div class="col mb-4">
                <PlayerIndividual PlayerOne="@item"> </PlayerIndividual>
            </div>
        }
    </div>
}


@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }
    [Parameter] public List<PlayerDTO> PlayersAll { get; set; }
    private List<Vote> Votes;


    private async Task VotePlayer(PlayerDTO Player)
    {
        Console.WriteLine("Am i here?");
        @*var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var newVote = new Vote()
        {
            PlayerId = Player.PlayerId,
            ApplicationUserId = new Guid(user.Identity.GetUserId())
        };*@

    }

    @*protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        var user = authState.User;
        Console.WriteLine("----------------userId: ", user.Identity.GetUserId());
        Console.WriteLine("----------------userName: ", user.Identity.GetUserName());
    }*@
}
